/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYM 1
#define NUM 2

#define MORPH(NAME, MOD, BINDING1, BINDING2) \
      NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <BINDING1>, <BINDING2>; \
            mods = <(MOD)>; \
      };

/ {
      behaviors {
            MORPH(ABSPC, MOD_LCTL, &kp BSPC, &kp LA(BSPC))
            MORPH(ALEFT, MOD_LCTL, &kp LEFT, &kp LA(LEFT))
            MORPH(ARIGHT, MOD_LCTL, &kp RIGHT, &kp LA(RIGHT))
            MORPH(AUP, MOD_LCTL, &kp UP, &kp LA(UP))
            MORPH(ADOWN, MOD_LCTL, &kp DOWN, &kp LA(DOWN))

            // MORPH(J_LAG, MOD_LALT, &kp J, &kp LA(LG(J)))
            // MORPH(K_LAG, MOD_LALT, &kp K, &kp LA(LG(K)))
            // MORPH(I_LAG, MOD_LALT, &kp I, &kp LA(LG(I)))
            // MORPH(M_LAG, MOD_LALT, &kp M, &kp LA(LG(M)))
            // MORPH(COMMA_LAG, MOD_LALT, &kp COMMA, &kp LA(LG(COMMA)))
            // MORPH(DOT_LAG, MOD_LALT, &kp DOT, &kp LA(LG(DOT)))

            // MORPH(Q_LAG, MOD_LALT, &kp Q, &kp LA(LG(Q)))
            // MORPH(W_LAG, MOD_LALT, &kp W, &kp LA(LG(W)))
            // MORPH(E_LAG, MOD_LALT, &kp E, &kp LA(LG(E)))
            // MORPH(R_LAG, MOD_LALT, &kp R, &kp LA(LG(R)))
            // MORPH(A_LAG, MOD_LALT, &kp A, &kp LA(LG(A)))
            // MORPH(S_LAG, MOD_LALT, &kp S, &kp LA(LG(S)))
            // MORPH(D_LAG, MOD_LALT, &kp D, &kp LA(LG(D)))
            // MORPH(F_LAG, MOD_LALT, &kp F, &kp LA(LG(F)))
            // MORPH(Z_LAG, MOD_LALT, &kp Z, &kp LA(LG(Z)))
            // MORPH(X_LAG, MOD_LALT, &kp X, &kp LA(LG(X)))
            // MORPH(C_LAG, MOD_LALT, &kp C, &kp LA(LG(C)))
            // MORPH(V_LAG, MOD_LALT, &kp V, &kp LA(LG(V)))

            MORPH(J_LEFT, MOD_RALT, &kp J, &ALEFT)
            MORPH(K_RIGHT, MOD_RALT, &kp K, &ARIGHT)
            MORPH(I_UP, MOD_RALT, &kp I, &AUP)
            MORPH(M_DOWN, MOD_RALT, &kp M, &ADOWN)
      };

      keymap {
            compatible = "zmk,keymap";

            default_layer {
                  bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &none         &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &I_UP         &kp O         &kp P         &none
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &none         &kp A         &kp S         &kp D         &kp F         &kp G             &kp H         &J_LEFT       &K_RIGHT      &kp L         &ABSPC        &none
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &none         &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &M_DOWN       &kp COMMA     &kp DOT       &mt RSHFT RET &none
// ╰─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╯
                                                &mt LCTRL ESC &kp SPACE     &kp LGUI          &mt RSHFT TAB &mo SYM       &kp RALT
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                  >;
            };

            symbol_layer {
                  bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &none         &kp EXCL      &kp AT        &kp HASH      &kp AMPS      &trans            &trans        &kp LBKT      &kp RBKT      &kp DQT       &kp TILDE     &none
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &none         &kp PRCNT     &kp PLUS      &kp MINUS     &kp EQUAL     &kp FSLH          &kp COLON     &kp LPAR      &kp RPAR      &kp SQT       &kp PIPE      &none
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &none         &kp CARET     &kp ASTRK     &kp UNDER     &kp DLLR      &kp BSLH          &kp SEMI      &kp LBRC      &kp RBRC      &kp GRAVE     &kp QMARK     &none
// ╰─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╯
                                                &mo NUM       &trans        &none             &trans        &trans        &trans
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                  >;
            };

            number_layer {
                  bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &none         &trans        &trans        &trans        &trans        &trans            &trans        &kp N7        &kp N8        &kp N9        &trans        &none
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &none         &trans        &trans        &trans        &trans        &trans            &trans        &kp N4        &kp N5        &kp N6        &kp N0        &none
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &none         &trans        &trans        &trans        &trans        &trans            &trans        &kp N1        &kp N2        &kp N3        &trans        &none
// ╰─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╯
                                                &trans        &trans        &none             &none         &trans        &trans
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                  >;
            };
      };
};
