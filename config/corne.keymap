/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NUM 1
#define SYM 2

#define MORPH(NAME, MOD, BINDING1, BINDING2) \
      NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <BINDING1>, <BINDING2>; \
            mods = <(MOD)>; \
      };

/ {
      behaviors {
            MORPH(J_LAG, MOD_LALT, &kp J, &kp LA(LG(J)))
            MORPH(K_LAG, MOD_LALT, &kp K, &kp LA(LG(K)))
            MORPH(I_LAG, MOD_LALT, &kp I, &kp LA(LG(I)))
            MORPH(M_LAG, MOD_LALT, &kp M, &kp LA(LG(M)))
            MORPH(COMMA_LAG, MOD_LALT, &kp COMMA, &kp LA(LG(COMMA)))
            MORPH(DOT_LAG, MOD_LALT, &kp DOT, &kp LA(LG(DOT)))
            MORPH(A_LAG, MOD_LALT, &kp A, &kp LA(LG(A)))
            MORPH(S_LAG, MOD_LALT, &kp S, &kp LA(LG(S)))
            MORPH(D_LAG, MOD_LALT, &kp D, &kp LA(LG(D)))
            MORPH(F_LAG, MOD_LALT, &kp F, &kp LA(LG(F)))

            MORPH(J_LEFT, MOD_RALT, &J_LAG, &kp LEFT)
            MORPH(K_RIGHT, MOD_RALT, &K_LAG, &kp RIGHT)
            MORPH(I_UP, MOD_RALT, &I_LAG, &kp UP)
            MORPH(M_DOWN, MOD_RALT, &M_LAG, &kp DOWN)

            F_TAB: f_tab {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&F_LAG>, <&kp TAB>;
                    mods = <(MOD_LCTRL)>;
                    keep-mods = <(MOD_LCTRL)>;
            };
      };

      keymap {
            compatible = "zmk,keymap";

            default_layer {
                  bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp TAB       &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &I_UP         &kp O         &kp P         &kp BSPC
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &mt LCTRL ESC &A_LAG        &S_LAG        &D_LAG        &F_TAB        &kp G             &kp H         &J_LEFT       &K_RIGHT      &kp L         &kp SEMI      &kp RET
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &kp LSHFT     &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &M_DOWN       &COMMA_LAG    &DOT_LAG      &kp FSLH      &kp RSHFT
// ╰─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╯
                                                &kp LALT      &kp SPACE     &kp LGUI          &mo NUM       &mo SYM       &kp RALT
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                  >;
            };

            number_layer {
                  bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp RG(TAB)   &kp RG(Q)     &kp RG(W)     &kp RG(E)     &kp RG(R)     &kp RG(T)         &trans        &kp N7        &kp N8        &kp N9        &trans        &trans
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &kp RG(LCTRL) &kp RG(A)     &kp RG(S)     &kp RG(D)     &kp RG(F)     &kp RG(G)         &kp RG(SPACE) &kp N4        &kp N5        &kp N6        &kp N0        &trans
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &kp RG(LSHFT) &kp RG(Z)     &kp RG(X)     &kp RG(C)     &kp RG(V)     &kp RG(B)         &trans        &kp N1        &kp N2        &kp N3        &trans        &trans
// ╰─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╯
                                                &trans        &trans        &trans            &none         &none         &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                  >;
            };

            symbol_layer {
                  bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &trans        &kp EXCL      &kp AT        &kp HASH      &kp AMPS      &trans            &trans        &kp LBKT      &kp RBKT      &kp DQT       &kp TILDE     &trans
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &trans        &kp PRCNT     &kp PLUS      &kp MINUS     &kp EQUAL     &trans            &kp C_VOL_UP  &kp LPAR      &kp RPAR      &kp SQT       &kp PIPE      &trans
// ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤
      &trans        &kp CARET     &kp ASTRK     &kp UNDER     &kp DLLR      &trans            &kp C_VOL_DN  &kp LBRC      &kp RBRC      &kp GRAVE     &kp BSLH      &trans
// ╰─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┤   ├─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╯
                                                &trans        &trans        &trans            &none         &none         &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                  >;
            };
      };
};
